# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-11-09 01:58
from __future__ import unicode_literals

from django.db import migrations
from urlparse import urlparse
from urllib import unquote


def migrate_proofs(apps, schema_editor):
    content_type_model = apps.get_model("contenttypes.ContentType")

    proof_model = apps.get_model("core.RelationshipProof")
    declaration_model = apps.get_model("core.Declaration")
    document_model = apps.get_model("core.Document")

    for model_name in [
        "Person2Person",
        "Person2Company",
        "Person2Country",
        "Company2Company",
        "Company2Country",
    ]:
        model = apps.get_model("core.%s" % model_name)

        content_type, _ = content_type_model.objects.get_or_create(
            model=model_name.lower(), app_label="core"
        )

        for obj in model.objects.all():
            declarations = []
            for i, p in enumerate(obj.proof.replace("\n", ", ").split(", ")):
                p = p.strip()
                if not p:
                    continue
                orig_p = p

                proof = proof_model(object_id=obj.pk, content_type=content_type)

                if i == 0:
                    proof.proof_title_uk = obj.proof_title

                if "declarations.com.ua" in p:
                    parsed = urlparse(p)
                    decl_uid = parsed.path.replace("/declaration/", "", 1)
                    try:
                        decl = declaration_model.objects.filter(
                            declaration_id=decl_uid
                        )[0]
                        proof.proof_title_uk = "Декларація за %s рік" % decl.year
                        proof.proof_title_en = (
                            "Income and assets declaration, %s" % decl.year
                        )
                        declarations.append(decl.pk)
                    except IndexError:
                        proof.proof_title_uk = "Декларація"
                        proof.proof_title_en = "Income and assets declaration"
                        print("Cannot find declaration with uid %s" % decl_uid)

                if "," in p or p.count("http") > 1:
                    if obj._meta.model_name in ["person2company", "person2person"]:
                        print(
                            "%s, %s %s %s, %s"
                            % (
                                obj,
                                obj.from_person.first_name,
                                obj.from_person.patronymic,
                                obj.from_person.last_name,
                                orig_p,
                            )
                        )
                    elif obj._meta.model_name == "company2company":
                        print("%s %s %s" % (obj, obj.from_company.name, orig_p))
                    elif obj._meta.model_name == "company2country":
                        print("%s %s %s" % (obj, obj.from_company.name, orig_p))
                    else:
                        print("%s %s %s" % (obj, obj.pk, orig_p))

                if p.startswith("http") and not p.startswith("https://pep.org.ua"):
                    proof.proof = p
                else:
                    try:
                        p = unquote(p.encode("utf-8")).decode("utf-8")
                    except UnicodeDecodeError:
                        pass

                    if p.startswith("https://pep.org.ua"):
                        p = p.replace("https://pep.org.ua", "", 1)

                    if p.startswith("/media/"):
                        p = p.replace("/media/", "", 1)

                    if p.startswith("media/"):
                        p = p.replace("media/", "", 1)

                    try:
                        doc = document_model.objects.get(doc=p)
                        proof.proof_document = doc
                        if not proof.proof_title_uk:
                            proof.proof_title_uk = doc.name

                    except document_model.DoesNotExist:
                        if obj._meta.model_name == "person2company":
                            print(
                                "%s, %s %s %s, %s"
                                % (
                                    obj,
                                    obj.from_person.first_name,
                                    obj.from_person.patronymic,
                                    obj.from_person.last_name,
                                    orig_p,
                                )
                            )
                        elif obj._meta.model_name == "company2company":
                            print("%s %s %s" % (obj, obj.from_company.name, orig_p))
                        elif obj._meta.model_name == "company2country":
                            print("%s %s %s" % (obj, obj.from_company.name, orig_p))
                        else:
                            print("%s %s %s" % (obj, obj.pk, orig_p))

                if declarations and hasattr(p, "declarations"):
                    p.declarations = declarations
                    p.save()

                proof.save()


def truncate_proofs(apps, schema_editor):
    proof_model = apps.get_model("core.RelationshipProof")

    proof_model.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0127_auto_20171106_0049_squashed_0131_auto_20171108_1521")
    ]

    operations = [migrations.RunPython(migrate_proofs, reverse_code=truncate_proofs)]
